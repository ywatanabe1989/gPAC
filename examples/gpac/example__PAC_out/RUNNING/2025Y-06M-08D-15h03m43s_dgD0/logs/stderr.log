/home/ywatanabe/proj/gPAC/examples/gpac/example__PAC.py:288: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
  all_labels.append(torch.tensor(label))
Traceback (most recent call last):
  File "/home/ywatanabe/proj/gPAC/examples/gpac/example__PAC.py", line 926, in <module>
    run_main()
  File "/home/ywatanabe/proj/gPAC/examples/gpac/example__PAC.py", line 914, in run_main
    exit_status = main(args)
  File "/home/ywatanabe/proj/gPAC/examples/gpac/example__PAC.py", line 864, in main
    demo_trainable_pac(args)
  File "/home/ywatanabe/proj/gPAC/examples/gpac/example__PAC.py", line 422, in demo_trainable_pac
    total_loss.backward()
  File "/data/gpfs/projects/punim2354/ywatanabe/gPAC/.env-3.10/lib/python3.10/site-packages/torch/_tensor.py", line 648, in backward
    torch.autograd.backward(
  File "/data/gpfs/projects/punim2354/ywatanabe/gPAC/.env-3.10/lib/python3.10/site-packages/torch/autograd/__init__.py", line 353, in backward
    _engine_run_backward(
  File "/data/gpfs/projects/punim2354/ywatanabe/gPAC/.env-3.10/lib/python3.10/site-packages/torch/autograd/graph.py", line 824, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: Trying to backward through the graph a second time (or directly access saved tensors after they have already been freed). Saved intermediate values of the graph are freed when you call .backward() or autograd.grad(). Specify retain_graph=True if you need to backward through the graph a second time or if you need to access saved tensors after calling backward.
