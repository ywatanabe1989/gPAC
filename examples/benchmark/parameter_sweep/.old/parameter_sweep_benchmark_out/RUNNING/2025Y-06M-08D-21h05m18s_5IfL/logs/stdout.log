[94m
########################################
## mngs v1.11.0
## 2025Y-06M-08D-21h05m18s_5IfL (PID: 280711)
########################################
[0m
[93m
========================================
/home/ywatanabe/proj/gPAC/examples/_performance/parameter_sweep/parameter_sweep_benchmark.py
Namespace(device='auto', n_repeats=3, no_quick=False, quick=True)
========================================
[0m
[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[37], line 593[0m
[1;32m    583[0m     mngs[38;5;241m.[39mgen[38;5;241m.[39mclose(
[1;32m    584[0m         CONFIG,
[1;32m    585[0m         verbose[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[0;32m   (...)[0m
[1;32m    588[0m         exit_status[38;5;241m=[39mexit_status,
[1;32m    589[0m     )
[1;32m    592[0m [38;5;28;01mif[39;00m [38;5;18m__name__[39m [38;5;241m==[39m [38;5;124m"[39m[38;5;124m__main__[39m[38;5;124m"[39m:
[0;32m--> 593[0m     [43mrun_main[49m[43m([49m[43m)[49m
[1;32m    595[0m [38;5;66;03m# EOF[39;00m

Cell [0;32mIn[37], line 580[0m, in [0;36mrun_main[0;34m()[0m
[1;32m    570[0m CONFIG, sys[38;5;241m.[39mstdout, sys[38;5;241m.[39mstderr, plt, CC [38;5;241m=[39m mngs[38;5;241m.[39mgen[38;5;241m.[39mstart(
[1;32m    571[0m     sys,
[1;32m    572[0m     plt,
[0;32m   (...)[0m
[1;32m    576[0m     agg[38;5;241m=[39m[38;5;28;01mTrue[39;00m,
[1;32m    577[0m )
[1;32m    579[0m [38;5;66;03m# Main[39;00m
[0;32m--> 580[0m exit_status [38;5;241m=[39m [43mmain[49m[43m([49m[43margs[49m[43m)[49m
[1;32m    582[0m [38;5;66;03m# Close the mngs framework[39;00m
[1;32m    583[0m mngs[38;5;241m.[39mgen[38;5;241m.[39mclose(
[1;32m    584[0m     CONFIG,
[1;32m    585[0m     verbose[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[0;32m   (...)[0m
[1;32m    588[0m     exit_status[38;5;241m=[39mexit_status,
[1;32m    589[0m )

Cell [0;32mIn[37], line 217[0m, in [0;36mmain[0;34m(args)[0m
[1;32m    216[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mmain[39m(args):
[0;32m--> 217[0m     params [38;5;241m=[39m [43msetup_parameters[49m[43m([49m[43m)[49m
[1;32m    218[0m     [38;5;28m__import__[39m([38;5;124m"[39m[38;5;124mipdb[39m[38;5;124m"[39m)[38;5;241m.[39mset_trace()
[1;32m    219[0m     comp_time_gp, output_gp [38;5;241m=[39m benchmark([38;5;241m*[39m[38;5;241m*[39mparams)

Cell [0;32mIn[37], line 192[0m, in [0;36msetup_parameters[0;34m()[0m
[1;32m    189[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21msetup_parameters[39m():
[1;32m    190[0m     [38;5;28;01mreturn[39;00m {
[1;32m    191[0m         [38;5;66;03m# Parameters for Benchmarking[39;00m
[0;32m--> 192[0m         [43mpackage[49m: [38;5;124m"[39m[38;5;124mgpac[39m[38;5;124m"[39m,
[1;32m    193[0m         n_runs: [38;5;241m3[39m,
[1;32m    194[0m         [38;5;66;03m# Parameters for Data Generation[39;00m
[1;32m    195[0m         n_samples: [38;5;241m16[39m,
[1;32m    196[0m         batch_size: [38;5;241m4[39m,
[1;32m    197[0m         n_channels: [38;5;241m4[39m,
[1;32m    198[0m         n_segments: [38;5;241m4[39m,
[1;32m    199[0m         duration_sec: [38;5;241m4[39m,
[1;32m    200[0m         fs: [38;5;241m512[39m,
[1;32m    201[0m         [38;5;66;03m# Parameters for PAC Calculation[39;00m
[1;32m    202[0m         [38;5;66;03m# seq_len :  int(duration_sec * fs),[39;00m
[1;32m    203[0m         pha_start_hz: [38;5;241m2.0[39m,
[1;32m    204[0m         pha_end_hz: [38;5;241m30.0[39m,
[1;32m    205[0m         pha_n_bands: [38;5;241m30[39m,
[1;32m    206[0m         amp_start_hz: [38;5;241m30[39m,
[1;32m    207[0m         amp_end_hz: [38;5;241m230[39m,
[1;32m    208[0m         amp_n_bands: [38;5;241m30[39m,
[1;32m    209[0m         device: [38;5;124m"[39m[38;5;124mcuda[39m[38;5;124m"[39m,
[1;32m    210[0m         device_ids: [38;5;28;01mNone[39;00m,
[1;32m    211[0m         n_perm: [38;5;241m4[39m,
[1;32m    212[0m         fp16: [38;5;28;01mFalse[39;00m,
[1;32m    213[0m     }

[0;31mNameError[0m: name 'package' is not defined


[0;31m#!/usr/bin/env python3[0m[0;34m[0m
[0;34m[0m[0;31m# -*- coding: utf-8 -*-[0m[0;34m[0m
[0;34m[0m[0;31m# Timestamp: "2025-06-08 21:05:47 (ywatanabe)"[0m[0;34m[0m
[0;34m[0m[0;31m# File: /ssh:ywatanabe@sp:/home/ywatanabe/proj/gPAC/examples/_performance/parameter_sweep/parameter_sweep_benchmark.py[0m[0;34m[0m
[0;34m[0m[0;31m# ----------------------------------------[0m[0;34m[0m
[0;34m[0m[0;32mimport[0m [0mos[0m[0;34m[0m
[0;34m[0m[0m__FILE__[0m [0;34m=[0m [0;34m([0m[0;34m[0m
[0;34m[0m    [0;34m"./examples/_performance/parameter_sweep/parameter_sweep_benchmark.py"[0m[0;34m[0m
[0;34m[0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0m__DIR__[0m [0;34m=[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mdirname[0m[0;34m([0m[0m__FILE__[0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;31m# ----------------------------------------[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m"""[0m
[0;34mFunctionalities:[0m
[0;34m  - Systematic parameter sweep benchmark for gPAC vs TensorPAC[0m
[0;34m  - Varies one parameter at a time to clarify dependencies[0m
[0;34m  - Creates comprehensive visualizations of performance scaling[0m
[0;34m[0m
[0;34mDependencies:[0m
[0;34m  - scripts: None[0m
[0;34m  - packages: gpac, tensorpac, torch, numpy, matplotlib, mngs, yaml[0m
[0;34m[0m
[0;34mIO:[0m
[0;34m  - input-files: None[0m
[0;34m  - output-files: ./parameter_sweep_out/parameter_sweep_results.yaml, ./parameter_sweep_out/parameter_dependencies.gif[0m
[0;34m"""[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m"""Imports"""[0m[0;34m[0m
[0;34m[0m[0;32mimport[0m [0margparse[0m[0;34m[0m
[0;34m[0m[0;32mimport[0m [0msys[0m[0;34m[0m
[0;34m[0m[0;32mimport[0m [0mtime[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;32mimport[0m [0mmatplotlib[0m[0;34m[0m
[0;34m[0m[0;32mimport[0m [0mtorch[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0mmatplotlib[0m[0;34m.[0m[0muse[0m[0;34m([0m[0;34m"Agg"[0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0msys[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0;34m"../../../src"[0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m"""Parameters"""[0m[0;34m[0m
[0;34m[0m[0;31m# Baseline parameters[0m[0;34m[0m
[0;34m[0m[0mBASELINE[0m [0;34m=[0m [0;34m{[0m[0;34m[0m
[0;34m[0m    [0;31m# Signal Size Parameters[0m[0;34m[0m
[0;34m[0m    [0;34m"batch_size"[0m[0;34m:[0m [0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"n_channels"[0m[0;34m:[0m [0;36m8[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"seq_sec"[0m[0;34m:[0m [0;36m4.0[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"fs"[0m[0;34m:[0m [0;36m512[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;31m# PAC Resolution Parameters[0m[0;34m[0m
[0;34m[0m    [0;34m"pha_n_bands"[0m[0;34m:[0m [0;36m10[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"amp_n_bands"[0m[0;34m:[0m [0;36m15[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;31m# Computation Parameters[0m[0;34m[0m
[0;34m[0m    [0;34m"n_perm"[0m[0;34m:[0m [0;36m0[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"fp16"[0m[0;34m:[0m [0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"multi_gpu"[0m[0;34m:[0m [0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"device"[0m[0;34m:[0m [0;34m"cuda"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m[0;34m}[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m# Parameters to vary (one at a time)[0m[0;34m[0m
[0;34m[0m[0mVARIATIONS[0m [0;34m=[0m [0;34m{[0m[0;34m[0m
[0;34m[0m    [0;31m# Signal Size Parameters[0m[0;34m[0m
[0;34m[0m    [0;34m"batch_size"[0m[0;34m:[0m [0;34m[[0m[0;36m1[0m[0;34m,[0m [0;36m2[0m[0;34m,[0m [0;36m4[0m[0;34m,[0m [0;36m8[0m[0;34m,[0m [0;36m16[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"n_channels"[0m[0;34m:[0m [0;34m[[0m[0;36m1[0m[0;34m,[0m [0;36m2[0m[0;34m,[0m [0;36m4[0m[0;34m,[0m [0;36m8[0m[0;34m,[0m [0;36m16[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"seq_sec"[0m[0;34m:[0m [0;34m[[0m[0;36m1.0[0m[0;34m,[0m [0;36m2.0[0m[0;34m,[0m [0;36m4.0[0m[0;34m,[0m [0;36m8.0[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"fs"[0m[0;34m:[0m [0;34m[[0m[0;36m512[0m[0;34m,[0m [0;36m1024[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;31m# PAC Resolution Parameters - reduced ranges[0m[0;34m[0m
[0;34m[0m    [0;34m"pha_n_bands"[0m[0;34m:[0m [0;34m[[0m[0;36m5[0m[0;34m,[0m [0;36m10[0m[0;34m,[0m [0;36m15[0m[0;34m,[0m [0;36m20[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"amp_n_bands"[0m[0;34m:[0m [0;34m[[0m[0;36m5[0m[0;34m,[0m [0;36m10[0m[0;34m,[0m [0;36m15[0m[0;34m,[0m [0;36m20[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;31m# Computation Parameters[0m[0;34m[0m
[0;34m[0m    [0;34m"n_perm"[0m[0;34m:[0m [0;34m[[0m[0;36m0[0m[0;34m,[0m [0;36m16[0m[0;34m,[0m [0;36m50[0m[0;34m,[0m [0;36m100[0m[0;34m,[0m [0;36m200[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"fp16"[0m[0;34m:[0m [0;34m[[0m[0;32mFalse[0m[0;34m,[0m [0;32mTrue[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m"multi_gpu"[0m[0;34m:[0m [0;34m[[0m[0;32mFalse[0m[0;34m,[0m [0;32mTrue[0m[0;34m][0m[0;34m,[0m[0;34m[0m
[0;34m[0m[0;34m}[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m"""Functions & Classes"""[0m[0;34m[0m
[0;34m[0m[0;32mdef[0m [0mparse_args[0m[0;34m([0m[0;34m)[0m [0;34m->[0m [0margparse[0m[0;34m.[0m[0mNamespace[0m[0;34m:[0m[0;34m[0m
[0;34m[0m    [0;34m"""Parse command line arguments."""[0m[0;34m[0m
[0;34m[0m    [0;32mimport[0m [0mmngs[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0mscript_mode[0m [0;34m=[0m [0mmngs[0m[0;34m.[0m[0mgen[0m[0;34m.[0m[0mis_script[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m    [0mparser[0m [0;34m=[0m [0margparse[0m[0;34m.[0m[0mArgumentParser[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0mdescription[0m[0;34m=[0m[0;34m"Parameter sweep benchmark for gPAC"[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m[0m
[0;34m[0m    [0mparser[0m[0;34m.[0m[0madd_argument[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0;34m"--device"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mtype[0m[0;34m=[0m[0mstr[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mdefault[0m[0;34m=[0m[0;34m"auto"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mhelp[0m[0;34m=[0m[0;34m"Device: 'cpu', 'cuda', or 'auto'"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m[0m
[0;34m[0m    [0mparser[0m[0;34m.[0m[0madd_argument[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0;34m"--n_repeats"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mtype[0m[0;34m=[0m[0mint[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mdefault[0m[0;34m=[0m[0;36m3[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mhelp[0m[0;34m=[0m[0;34m"Number of repeats for each measurement"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m[0m
[0;34m[0m    [0mparser[0m[0;34m.[0m[0madd_argument[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0;34m"--no-quick"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0maction[0m[0;34m=[0m[0;34m"store_true"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mhelp[0m[0;34m=[0m[0;34m"Quick test with fewer parameter values"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m[0m
[0;34m[0m    [0margs[0m [0;34m=[0m [0mparser[0m[0;34m.[0m[0mparse_args[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m    [0mmngs[0m[0;34m.[0m[0mstr[0m[0;34m.[0m[0mprintc[0m[0;34m([0m[0margs[0m[0;34m,[0m [0mc[0m[0;34m=[0m[0;34m"yellow"[0m[0;34m)[0m[0;34m[0m
[0;34m[0m    [0margs[0m[0;34m.[0m[0mquick[0m [0;34m=[0m [0;32mnot[0m [0margs[0m[0;34m.[0m[0mno_quick[0m[0;34m[0m
[0;34m[0m    [0;32mreturn[0m [0margs[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;32mdef[0m [0mbenchmark[0m[0;34m([0m[0;34m[0m
[0;34m[0m    [0;31m# Parameters for Benchmarking[0m[0;34m[0m
[0;34m[0m    [0mpackage[0m[0;34m:[0m [0mstr[0m [0;34m=[0m [0;34m"gpac"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mn_runs[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m3[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;31m# Parameters for Data Genaration[0m[0;34m[0m
[0;34m[0m    [0mn_samples[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m16[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mbatch_size[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mn_channels[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mn_segments[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mduration_sec[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mfs[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m512[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;31m# Parameters for PAC Calculation[0m[0;34m[0m
[0;34m[0m    [0mpha_start_hz[0m[0;34m:[0m [0mfloat[0m [0;34m=[0m [0;36m2.0[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mpha_end_hz[0m[0;34m:[0m [0mfloat[0m [0;34m=[0m [0;36m30.0[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mpha_n_bands[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m30[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mamp_start_hz[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m30[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mamp_end_hz[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m230[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mamp_n_bands[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m30[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mdevice[0m[0;34m:[0m [0mstr[0m [0;34m=[0m [0;34m"cuda"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mdevice_ids[0m[0;34m:[0m [0mlist[0m [0;34m=[0m [0;32mNone[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mn_perm[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mfp16[0m[0;34m:[0m [0mbool[0m [0;34m=[0m [0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mmulti_gpu[0m[0;34m:[0m [0mbool[0m [0;34m=[0m [0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m[0;34m)[0m [0;34m->[0m [0mtuple[0m[0;34m:[0m[0;34m[0m
[0;34m[0m    [0;34m"""Benchmark gPAC with given parameters using correct API."""[0m[0;34m[0m
[0;34m[0m    [0;32mimport[0m [0mgpac[0m[0;34m[0m
[0;34m[0m    [0;32mimport[0m [0mmngs[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0mmngs[0m[0;34m.[0m[0mstr[0m[0;34m.[0m[0mprintc[0m[0;34m([0m[0;34m"=== Benchmark gPAC ==="[0m[0;34m,[0m [0mc[0m[0;34m=[0m[0;34m"yellow"[0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;31m# Validation[0m[0;34m[0m
[0;34m[0m    [0;32massert[0m [0mdevice[0m [0;32min[0m [0;34m[[0m[0;34m"cuda"[0m[0;34m,[0m [0;34m"cpu"[0m[0;34m][0m[0;34m[0m
[0;34m[0m    [0;32massert[0m [0mpackage[0m [0;32min[0m [0;34m[[0m[0;34m"gpac"[0m[0;34m,[0m [0;34m"tensorpac"[0m[0;34m][0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;31m# DataLoader[0m[0;34m[0m
[0;34m[0m    [0mdataloader[0m [0;34m=[0m [0mgpac[0m[0;34m.[0m[0mdataset[0m[0;34m.[0m[0mgenerate_pac_dataloader[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0mn_samples[0m[0;34m=[0m[0mn_samples[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mbatch_size[0m[0;34m=[0m[0mbatch_size[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mn_channels[0m[0;34m=[0m[0mn_channels[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mn_segments[0m[0;34m=[0m[0mn_segments[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mduration_sec[0m[0;34m=[0m[0mduration_sec[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mfs[0m[0;34m=[0m[0mfs[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mpac_config[0m[0;34m=[0m[0mgpac[0m[0;34m.[0m[0mdataset[0m[0;34m.[0m[0msingle_class_single_pac_config[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;31m# Clear GPU memory[0m[0;34m[0m
[0;34m[0m    [0;32mif[0m [0mtorch[0m[0;34m.[0m[0mcuda[0m[0;34m.[0m[0mis_available[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m
[0;34m[0m        [0mtorch[0m[0;34m.[0m[0mcuda[0m[0;34m.[0m[0mempty_cache[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;31m# Initialize PAC Calculator[0m[0;34m[0m
[0;34m[0m    [0;32mif[0m [0mdevice_ids[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m
[0;34m[0m        [0mdevice_ids[0m [0;34m=[0m [0;34m"all"[0m [0;32mif[0m [0mmulti_gpu[0m [0;32melse[0m [0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m[0m
[0;34m[0m    [0mpac_gp[0m [0;34m=[0m [0mgpac[0m[0;34m.[0m[0mPAC[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0mseq_len[0m[0;34m=[0m[0mseq_len[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mfs[0m[0;34m=[0m[0mfs[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mpha_start_hz[0m[0;34m=[0m[0mpha_start_hz[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mpha_end_hz[0m[0;34m=[0m[0mpha_end_hz[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mpha_n_bands[0m[0;34m=[0m[0mpha_n_bands[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mamp_start_hz[0m[0;34m=[0m[0mamp_start_hz[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mamp_end_hz[0m[0;34m=[0m[0mamp_end_hz[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mamp_n_bands[0m[0;34m=[0m[0mamp_n_bands[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mdevice_ids[0m[0;34m=[0m[0mdevice_ids[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mn_perm[0m[0;34m=[0m[0mn_perm[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mfp16[0m[0;34m=[0m[0mfp16[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m.[0m[0mto[0m[0;34m([0m[0mdevice[0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;31m# Warm-up run[0m[0;34m[0m
[0;34m[0m    [0;32mwith[0m [0mtorch[0m[0;34m.[0m[0mno_grad[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m
[0;34m[0m        [0msignal[0m[0;34m,[0m [0mlabels[0m[0;34m,[0m [0mmetadata[0m [0;34m=[0m [0mnext[0m[0;34m([0m[0miter[0m[0;34m([0m[0mdataloader[0m[0;34m)[0m[0;34m)[0m[0;34m[0m
[0;34m[0m        [0m_[0m [0;34m=[0m [0mpac_gp[0m[0;34m([0m[0msignal[0m[0;34m.[0m[0mto[0m[0;34m([0m[0mdevice[0m[0;34m)[0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;31m# Main[0m[0;34m[0m
[0;34m[0m    [0mcomp_start_time[0m [0;34m=[0m [0mtime[0m[0;34m.[0m[0mtime[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m    [0;32mwith[0m [0mtorch[0m[0;34m.[0m[0mno_grad[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m
[0;34m[0m        [0;32mfor[0m [0mi_run[0m[0;34m,[0m [0mbatch[0m [0;32min[0m [0menumerate[0m[0;34m([0m[0mdataloader[0m[0;34m)[0m[0;34m:[0m[0;34m[0m
[0;34m[0m            [0msignal[0m[0;34m,[0m [0mlabels[0m[0;34m,[0m [0mmetadata[0m [0;34m=[0m [0mbatch[0m[0;34m[0m
[0;34m[0m            [0moutput_gp[0m [0;34m=[0m [0mpac_gp[0m[0;34m([0m[0msignal[0m[0;34m.[0m[0mto[0m[0;34m([0m[0mdevice[0m[0;34m)[0m[0;34m)[0m[0;34m[0m
[0;34m[0m    [0mcomp_time[0m [0;34m=[0m [0mtime[0m[0;34m.[0m[0mtime[0m[0;34m([0m[0;34m)[0m [0;34m-[0m [0mcomp_start_time[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;32mreturn[0m [0mcomp_time[0m[0;34m,[0m [0moutput_gp[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;32mdef[0m [0msetup_parameters[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m
[0;34m[0m    [0;32mreturn[0m [0mdict[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0;31m# Parameters for Benchmarking[0m[0;34m[0m
[0;34m[0m        [0mpackage[0m[0;34m=[0m[0;34m"gpac"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mn_runs[0m[0;34m=[0m[0;36m3[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0;31m# Parameters for Data Generation[0m[0;34m[0m
[0;34m[0m        [0mn_samples[0m[0;34m=[0m[0;36m16[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mbatch_size[0m[0;34m=[0m[0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mn_channels[0m[0;34m=[0m[0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mn_segments[0m[0;34m=[0m[0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mduration_sec[0m[0;34m=[0m[0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mfs[0m[0;34m=[0m[0;36m512[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0;31m# Parameters for PAC Calculation[0m[0;34m[0m
[0;34m[0m        [0;31m# seq_len =  int(duration_sec * fs),[0m[0;34m[0m
[0;34m[0m        [0mpha_start_hz[0m[0;34m=[0m[0;36m2.0[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mpha_end_hz[0m[0;34m=[0m[0;36m30.0[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mpha_n_bands[0m[0;34m=[0m[0;36m30[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mamp_start_hz[0m[0;34m=[0m[0;36m30[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mamp_end_hz[0m[0;34m=[0m[0;36m230[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mamp_n_bands[0m[0;34m=[0m[0;36m30[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mdevice[0m[0;34m=[0m[0;34m"cuda"[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mdevice_ids[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mn_perm[0m[0;34m=[0m[0;36m4[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mfp16[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;32mdef[0m [0mmain[0m[0;34m([0m[0margs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m
[0;34m[0m    [0mparams[0m [0;34m=[0m [0msetup_parameters[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m    [0m__import__[0m[0;34m([0m[0;34m"ipdb"[0m[0;34m)[0m[0;34m.[0m[0mset_trace[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m    [0mcomp_time_gp[0m[0;34m,[0m [0moutput_gp[0m [0;34m=[0m [0mbenchmark[0m[0;34m([0m[0;34m**[0m[0mparams[0m[0;34m)[0m[0;34m[0m
[0;34m[0m    [0;31m# dict_keys(['pac', 'phase_frequencies', 'amplitude_frequencies', 'pac_z', 'surrogates', 'surrogate_mean', 'surrogate_std'])[0m[0;34m[0m
[0;34m[0m    [0m__import__[0m[0;34m([0m[0;34m"ipdb"[0m[0;34m)[0m[0;34m.[0m[0mset_trace[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m    [0;32mreturn[0m [0;36m0[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m# def benchmark_tensorpac(data, fs, pha_n_bands, amp_n_bands, n_perm):[0m[0;34m[0m
[0;34m[0m[0;31m#     """Benchmark TensorPAC with given parameters."""[0m[0;34m[0m
[0;34m[0m[0;31m#     batch_size, n_chs, n_samples = data.shape[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # TensorPAC expects (n_epochs, n_channels, n_times)[0m[0;34m[0m
[0;34m[0m[0;31m#     # For multi-channel, we need to process each channel separately[0m[0;34m[0m
[0;34m[0m[0;31m#     # and average the results[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # IMPORTANT: We use explicit frequency bands instead of TensorPAC's string[0m[0;34m[0m
[0;34m[0m[0;31m#     # configurations (e.g., 'mres', 'hres') to ensure fair comparison with gPAC.[0m[0;34m[0m
[0;34m[0m[0;31m#     # String configurations in TensorPAC create overlapping bands which differ[0m[0;34m[0m
[0;34m[0m[0;31m#     # from gPAC's sequential non-overlapping approach.[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Define explicit frequency bands to match gPAC (sequential non-overlapping)[0m[0;34m[0m
[0;34m[0m[0;31m#     pha_edges = np.linspace(2, 20, pha_n_bands + 1)[0m[0;34m[0m
[0;34m[0m[0;31m#     amp_edges = np.linspace(30, 100, amp_n_bands + 1)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Convert to band pairs for TensorPAC[0m[0;34m[0m
[0;34m[0m[0;31m#     f_pha = np.c_[pha_edges[:-1], pha_edges[1:]][0m[0;34m[0m
[0;34m[0m[0;31m#     f_amp = np.c_[amp_edges[:-1], amp_edges[1:]][0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Initialize PAC with explicit bands[0m[0;34m[0m
[0;34m[0m[0;31m#     pac = TensorPAC([0m[0;34m[0m
[0;34m[0m[0;31m#         idpac=(2, 0, 0),[0m[0;34m[0m
[0;34m[0m[0;31m#         f_pha=f_pha,[0m[0;34m[0m
[0;34m[0m[0;31m#         f_amp=f_amp,[0m[0;34m[0m
[0;34m[0m[0;31m#         dcomplex="hilbert",[0m[0;34m[0m
[0;34m[0m[0;31m#         verbose=False,[0m[0;34m[0m
[0;34m[0m[0;31m#     )[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Reshape data for TensorPAC (n_epochs * n_channels, n_times)[0m[0;34m[0m
[0;34m[0m[0;31m#     data_reshaped = data.reshape(-1, n_samples)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Time the computation[0m[0;34m[0m
[0;34m[0m[0;31m#     start_time = time.time()[0m[0;34m[0m
[0;34m[0m[0;31m#     result = pac.filterfit([0m[0;34m[0m
[0;34m[0m[0;31m#         fs, data_reshaped, n_perm=n_perm if n_perm else 0, verbose=False[0m[0;34m[0m
[0;34m[0m[0;31m#     )[0m[0;34m[0m
[0;34m[0m[0;31m#     comp_time = time.time() - start_time[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     return comp_time, result[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m# def run_parameter_sweep(args):[0m[0;34m[0m
[0;34m[0m[0;31m#     """Run systematic parameter sweep."""[0m[0;34m[0m
[0;34m[0m[0;31m#     results = defaultdict(list)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Setup device[0m[0;34m[0m
[0;34m[0m[0;31m#     if args.device == "auto":[0m[0;34m[0m
[0;34m[0m[0;31m#         device = "cuda" if torch.cuda.is_available() else "cpu"[0m[0;34m[0m
[0;34m[0m[0;31m#     else:[0m[0;34m[0m
[0;34m[0m[0;31m#         device = args.device[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     print(f"Running parameter sweep on device: {device}")[0m[0;34m[0m
[0;34m[0m[0;31m#     print("=" * 60)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Quick mode adjustments[0m[0;34m[0m
[0;34m[0m[0;31m#     if args.quick:[0m[0;34m[0m
[0;34m[0m[0;31m#         for param in VARIATIONS:[0m[0;34m[0m
[0;34m[0m[0;31m#             if param not in ["fp16", "device"]:[0m[0;34m[0m
[0;34m[0m[0;31m#                 VARIATIONS[param] = VARIATIONS[param][::2][0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Iterate through each parameter[0m[0;34m[0m
[0;34m[0m[0;31m#     for param_name, param_values in VARIATIONS.items():[0m[0;34m[0m
[0;34m[0m[0;31m#         print(f"\nVarying parameter: {param_name}")[0m[0;34m[0m
[0;34m[0m[0;31m#         print("-" * 40)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         for param_value in param_values:[0m[0;34m[0m
[0;34m[0m[0;31m#             # Create test configuration[0m[0;34m[0m
[0;34m[0m[0;31m#             config = BASELINE.copy()[0m[0;34m[0m
[0;34m[0m[0;31m#             config[param_name] = param_value[0m[0;34m[0m
[0;34m[0m[0;31m#             config["device"] = device[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#             # Skip invalid combinations[0m[0;34m[0m
[0;34m[0m[0;31m#             if param_name == "fp16" and param_value and device == "cpu":[0m[0;34m[0m
[0;34m[0m[0;31m#                 continue[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#             print(f"  {param_name} = {param_value}...", end=" ", flush=True)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#             # Skip invalid combinations[0m[0;34m[0m
[0;34m[0m[0;31m#             if config["multi_gpu"] and not torch.cuda.is_available():[0m[0;34m[0m
[0;34m[0m[0;31m#                 continue[0m[0;34m[0m
[0;34m[0m[0;31m#             if config["multi_gpu"] and torch.cuda.device_count() < 2:[0m[0;34m[0m
[0;34m[0m[0;31m#                 continue[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#             # Run benchmarks[0m[0;34m[0m
[0;34m[0m[0;31m#             times_gpac = [][0m[0;34m[0m
[0;34m[0m[0;31m#             times_tp = [][0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#             for _ in range(args.n_repeats):[0m[0;34m[0m
[0;34m[0m[0;31m#                 # gPAC[0m[0;34m[0m
[0;34m[0m[0;31m#                 try:[0m[0;34m[0m
[0;34m[0m[0;31m#                     time_gpac, _ = benchmark_gpac([0m[0;34m[0m
[0;34m[0m[0;31m#                         batch_size=config["batch_size"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         n_channels=config["n_channels"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         seq_sec=config["seq_sec"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         fs=config["fs"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         pha_n_bands=config["pha_n_bands"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         amp_n_bands=config["amp_n_bands"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         n_perm=config["n_perm"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         fp16=config["fp16"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         multi_gpu=config["multi_gpu"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         device=config["device"],[0m[0;34m[0m
[0;34m[0m[0;31m#                     )[0m[0;34m[0m
[0;34m[0m[0;31m#                     times_gpac.append(time_gpac)[0m[0;34m[0m
[0;34m[0m[0;31m#                 except Exception as e:[0m[0;34m[0m
[0;34m[0m[0;31m#                     print(f"gPAC error: {e}")[0m[0;34m[0m
[0;34m[0m[0;31m#                     times_gpac.append(np.nan)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#                 # TensorPAC (skip if using GPU-specific features, but allow batch_size > 1)[0m[0;34m[0m
[0;34m[0m[0;31m#                 if not config["fp16"] and not config["multi_gpu"]:[0m[0;34m[0m
[0;34m[0m[0;31m#                     try:[0m[0;34m[0m
[0;34m[0m[0;31m#                         # Generate data for TensorPAC[0m[0;34m[0m
[0;34m[0m[0;31m#                         seq_len = int(config["fs"] * config["seq_sec"])[0m[0;34m[0m
[0;34m[0m[0;31m#                         data_tp = np.random.randn([0m[0;34m[0m
[0;34m[0m[0;31m#                             config["batch_size"], config["n_channels"], seq_len[0m[0;34m[0m
[0;34m[0m[0;31m#                         ).astype(np.float32)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#                         time_tp, _ = benchmark_tensorpac([0m[0;34m[0m
[0;34m[0m[0;31m#                             data_tp,[0m[0;34m[0m
[0;34m[0m[0;31m#                             config["fs"],[0m[0;34m[0m
[0;34m[0m[0;31m#                             config["pha_n_bands"],[0m[0;34m[0m
[0;34m[0m[0;31m#                             config["amp_n_bands"],[0m[0;34m[0m
[0;34m[0m[0;31m#                             config["n_perm"],[0m[0;34m[0m
[0;34m[0m[0;31m#                         )[0m[0;34m[0m
[0;34m[0m[0;31m#                         times_tp.append(time_tp)[0m[0;34m[0m
[0;34m[0m[0;31m#                     except Exception as e:[0m[0;34m[0m
[0;34m[0m[0;31m#                         print(f"TensorPAC error: {e}")[0m[0;34m[0m
[0;34m[0m[0;31m#                         times_tp.append(np.nan)[0m[0;34m[0m
[0;34m[0m[0;31m#                 else:[0m[0;34m[0m
[0;34m[0m[0;31m#                     times_tp.append(np.nan)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#             # Store results[0m[0;34m[0m
[0;34m[0m[0;31m#             results["param_name"].append(param_name)[0m[0;34m[0m
[0;34m[0m[0;31m#             results["param_value"].append(param_value)[0m[0;34m[0m
[0;34m[0m[0;31m#             results["gpac_time_mean"].append(np.nanmean(times_gpac))[0m[0;34m[0m
[0;34m[0m[0;31m#             results["gpac_time_std"].append(np.nanstd(times_gpac))[0m[0;34m[0m
[0;34m[0m[0;31m#             results["tensorpac_time_mean"].append(np.nanmean(times_tp))[0m[0;34m[0m
[0;34m[0m[0;31m#             results["tensorpac_time_std"].append(np.nanstd(times_tp))[0m[0;34m[0m
[0;34m[0m[0;31m#             results["speedup"].append([0m[0;34m[0m
[0;34m[0m[0;31m#                 np.nanmean(times_tp) / np.nanmean(times_gpac)[0m[0;34m[0m
[0;34m[0m[0;31m#             )[0m[0;34m[0m
[0;34m[0m[0;31m#             results["config"].append(config.copy())[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#             # Calculate throughput (samples per second)[0m[0;34m[0m
[0;34m[0m[0;31m#             seq_len = int(config["fs"] * config["seq_sec"])[0m[0;34m[0m
[0;34m[0m[0;31m#             total_samples = ([0m[0;34m[0m
[0;34m[0m[0;31m#                 config["batch_size"] * config["n_channels"] * seq_len[0m[0;34m[0m
[0;34m[0m[0;31m#             )[0m[0;34m[0m
[0;34m[0m[0;31m#             results["gpac_throughput"].append([0m[0;34m[0m
[0;34m[0m[0;31m#                 total_samples / np.nanmean(times_gpac) / 1e6[0m[0;34m[0m
[0;34m[0m[0;31m#             )[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#             print([0m[0;34m[0m
[0;34m[0m[0;31m#                 f"gPAC: {np.nanmean(times_gpac):.4f}s, "[0m[0;34m[0m
[0;34m[0m[0;31m#                 + f"TensorPAC: {np.nanmean(times_tp):.4f}s, "[0m[0;34m[0m
[0;34m[0m[0;31m#                 + f"Speedup: {results['speedup'][-1]:.1f}x"[0m[0;34m[0m
[0;34m[0m[0;31m#             )[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Convert to DataFrame for easier analysis[0m[0;34m[0m
[0;34m[0m[0;31m#     df = pd.DataFrame(results)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     return df[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m# def plot_parameter_dependency_plots(df):[0m[0;34m[0m
[0;34m[0m[0;31m#     """Create comprehensive visualization of parameter dependencies."""[0m[0;34m[0m
[0;34m[0m[0;31m#     import mngs[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Get unique parameters[0m[0;34m[0m
[0;34m[0m[0;31m#     params = df["param_name"].unique()[0m[0;34m[0m
[0;34m[0m[0;31m#     n_params = len(params)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Create figure with subplots[0m[0;34m[0m
[0;34m[0m[0;31m#     fig = mngs.plt.figure(figsize=(20, 12))[0m[0;34m[0m
[0;34m[0m[0;31m#     gs = gridspec.GridSpec(3, 3, figure=fig, hspace=0.3, wspace=0.3)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Color map for parameters[0m[0;34m[0m
[0;34m[0m[0;31m#     colors = plt.cm.tab10(np.linspace(0, 1, n_params))[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     for idx, param in enumerate(params):[0m[0;34m[0m
[0;34m[0m[0;31m#         row = idx // 3[0m[0;34m[0m
[0;34m[0m[0;31m#         col = idx % 3[0m[0;34m[0m
[0;34m[0m[0;31m#         ax = fig.add_subplot(gs[row, col])[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         # Filter data for this parameter[0m[0;34m[0m
[0;34m[0m[0;31m#         param_data = df[df["param_name"] == param].copy()[0m[0;34m[0m
[0;34m[0m[0;31m#         param_data = param_data.sort_values("param_value")[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         # Plot gPAC performance[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.errorbar([0m[0;34m[0m
[0;34m[0m[0;31m#             param_data["param_value"],[0m[0;34m[0m
[0;34m[0m[0;31m#             param_data["gpac_time_mean"],[0m[0;34m[0m
[0;34m[0m[0;31m#             yerr=param_data["gpac_time_std"],[0m[0;34m[0m
[0;34m[0m[0;31m#             label="gPAC",[0m[0;34m[0m
[0;34m[0m[0;31m#             marker="o",[0m[0;34m[0m
[0;34m[0m[0;31m#             color=colors[idx],[0m[0;34m[0m
[0;34m[0m[0;31m#             linewidth=2,[0m[0;34m[0m
[0;34m[0m[0;31m#             markersize=8,[0m[0;34m[0m
[0;34m[0m[0;31m#             capsize=5,[0m[0;34m[0m
[0;34m[0m[0;31m#         )[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         # Plot TensorPAC performance where available[0m[0;34m[0m
[0;34m[0m[0;31m#         valid_tp = ~param_data["tensorpac_time_mean"].isna()[0m[0;34m[0m
[0;34m[0m[0;31m#         if valid_tp.any():[0m[0;34m[0m
[0;34m[0m[0;31m#             ax.errorbar([0m[0;34m[0m
[0;34m[0m[0;31m#                 param_data.loc[valid_tp, "param_value"],[0m[0;34m[0m
[0;34m[0m[0;31m#                 param_data.loc[valid_tp, "tensorpac_time_mean"],[0m[0;34m[0m
[0;34m[0m[0;31m#                 yerr=param_data.loc[valid_tp, "tensorpac_time_std"],[0m[0;34m[0m
[0;34m[0m[0;31m#                 label="TensorPAC",[0m[0;34m[0m
[0;34m[0m[0;31m#                 marker="s",[0m[0;34m[0m
[0;34m[0m[0;31m#                 color=colors[idx],[0m[0;34m[0m
[0;34m[0m[0;31m#                 alpha=0.5,[0m[0;34m[0m
[0;34m[0m[0;31m#                 linewidth=2,[0m[0;34m[0m
[0;34m[0m[0;31m#                 markersize=8,[0m[0;34m[0m
[0;34m[0m[0;31m#                 capsize=5,[0m[0;34m[0m
[0;34m[0m[0;31m#                 linestyle="--",[0m[0;34m[0m
[0;34m[0m[0;31m#             )[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.set_xlabel(param.replace("_", " ").title())[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.set_ylabel("Time (seconds)")[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.set_title(f'Performance vs {param.replace("_", " ").title()}')[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.grid(True, alpha=0.3)[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.legend()[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         # Log scale for some parameters[0m[0;34m[0m
[0;34m[0m[0;31m#         if param in ["batch_size", "n_channels", "fs"]:[0m[0;34m[0m
[0;34m[0m[0;31m#             ax.set_xscale("log", base=2)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         # Add speedup on secondary y-axis where applicable[0m[0;34m[0m
[0;34m[0m[0;31m#         if valid_tp.any():[0m[0;34m[0m
[0;34m[0m[0;31m#             ax2 = ax.twinx()[0m[0;34m[0m
[0;34m[0m[0;31m#             speedups = param_data.loc[valid_tp, "speedup"][0m[0;34m[0m
[0;34m[0m[0;31m#             ax2.plot([0m[0;34m[0m
[0;34m[0m[0;31m#                 param_data.loc[valid_tp, "param_value"],[0m[0;34m[0m
[0;34m[0m[0;31m#                 speedups,[0m[0;34m[0m
[0;34m[0m[0;31m#                 "g-",[0m[0;34m[0m
[0;34m[0m[0;31m#                 alpha=0.7,[0m[0;34m[0m
[0;34m[0m[0;31m#                 linewidth=2,[0m[0;34m[0m
[0;34m[0m[0;31m#                 label="Speedup",[0m[0;34m[0m
[0;34m[0m[0;31m#             )[0m[0;34m[0m
[0;34m[0m[0;31m#             ax2.set_ylabel("Speedup (x)", color="g")[0m[0;34m[0m
[0;34m[0m[0;31m#             ax2.tick_params(axis="y", labelcolor="g")[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     plt.suptitle("gPAC Parameter Dependencies", fontsize=16)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Create throughput scaling plot[0m[0;34m[0m
[0;34m[0m[0;31m#     fig2, axes = mngs.plt.subplots(2, 2, figsize=(14, 10))[0m[0;34m[0m
[0;34m[0m[0;31m#     axes = axes.flatten()[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Select key parameters for throughput analysis[0m[0;34m[0m
[0;34m[0m[0;31m#     throughput_params = ["batch_size", "n_channels", "seq_sec", "pha_n_bands"][0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     for idx, param in enumerate(throughput_params):[0m[0;34m[0m
[0;34m[0m[0;31m#         ax = axes[idx][0m[0;34m[0m
[0;34m[0m[0;31m#         param_data = df[df["param_name"] == param].copy()[0m[0;34m[0m
[0;34m[0m[0;31m#         param_data = param_data.sort_values("param_value")[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.plot([0m[0;34m[0m
[0;34m[0m[0;31m#             param_data["param_value"],[0m[0;34m[0m
[0;34m[0m[0;31m#             param_data["gpac_throughput"],[0m[0;34m[0m
[0;34m[0m[0;31m#             "o-",[0m[0;34m[0m
[0;34m[0m[0;31m#             color=colors[idx],[0m[0;34m[0m
[0;34m[0m[0;31m#             linewidth=2,[0m[0;34m[0m
[0;34m[0m[0;31m#             markersize=8,[0m[0;34m[0m
[0;34m[0m[0;31m#             label="gPAC",[0m[0;34m[0m
[0;34m[0m[0;31m#         )[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.set_xlabel(param.replace("_", " ").title())[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.set_ylabel("Throughput (Million samples/s)")[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.set_title(f'Throughput vs {param.replace("_", " ").title()}')[0m[0;34m[0m
[0;34m[0m[0;31m#         ax.grid(True, alpha=0.3)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#         if param in ["batch_size", "n_channels"]:[0m[0;34m[0m
[0;34m[0m[0;31m#             ax.set_xscale("log", base=2)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     plt.suptitle("gPAC Throughput Scaling", fontsize=16)[0m[0;34m[0m
[0;34m[0m[0;31m#     # plt.tight_layout()[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     return fig, fig2[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m# def main(args):[0m[0;34m[0m
[0;34m[0m[0;31m#     """Main function."""[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     print("\n" + "=" * 60)[0m[0;34m[0m
[0;34m[0m[0;31m#     print("gPAC Parameter Sweep Benchmark")[0m[0;34m[0m
[0;34m[0m[0;31m#     print("=" * 60)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Run parameter sweep[0m[0;34m[0m
[0;34m[0m[0;31m#     df_sweep = run_parameter_sweep(args)[0m[0;34m[0m
[0;34m[0m[0;31m#     mngs.io.save([0m[0;34m[0m
[0;34m[0m[0;31m#         df_sweep.to_dict(),[0m[0;34m[0m
[0;34m[0m[0;31m#         "./parameter_sweep_benchmark_out/parameter_sweep_results.yaml",[0m[0;34m[0m
[0;34m[0m[0;31m#     )[0m[0;34m[0m
[0;34m[0m[0;31m#     mngs.io.save([0m[0;34m[0m
[0;34m[0m[0;31m#         df_sweep, "./parameter_sweep_benchmark_out/parameter_sweep_results.csv"[0m[0;34m[0m
[0;34m[0m[0;31m#     )[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Create visualizations[0m[0;34m[0m
[0;34m[0m[0;31m#     print("\nCreating parameter dependency plots...")[0m[0;34m[0m
[0;34m[0m[0;31m#     fig1, fig2 = plot_parameter_dependency_plots(df_sweep)[0m[0;34m[0m
[0;34m[0m[0;31m#     mngs.io.save([0m[0;34m[0m
[0;34m[0m[0;31m#         fig1, "./parameter_sweep_benchmark_out/parameter_dependencies.gif"[0m[0;34m[0m
[0;34m[0m[0;31m#     )[0m[0;34m[0m
[0;34m[0m[0;31m#     mngs.io.save([0m[0;34m[0m
[0;34m[0m[0;31m#         fig2, "./parameter_sweep_benchmark_out/throughput_scaling.gif"[0m[0;34m[0m
[0;34m[0m[0;31m#     )[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     # Print summary statistics[0m[0;34m[0m
[0;34m[0m[0;31m#     print("\n" + "=" * 60)[0m[0;34m[0m
[0;34m[0m[0;31m#     print("Summary Statistics")[0m[0;34m[0m
[0;34m[0m[0;31m#     print("=" * 60)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     for param in df_sweep["param_name"].unique():[0m[0;34m[0m
[0;34m[0m[0;31m#         param_data = df_sweep[df_sweep["param_name"] == param][0m[0;34m[0m
[0;34m[0m[0;31m#         print(f"\n{param}:")[0m[0;34m[0m
[0;34m[0m[0;31m#         print([0m[0;34m[0m
[0;34m[0m[0;31m#             f"  gPAC time range: {param_data['gpac_time_mean'].min():.4f} - "[0m[0;34m[0m
[0;34m[0m[0;31m#             f"{param_data['gpac_time_mean'].max():.4f} seconds"[0m[0;34m[0m
[0;34m[0m[0;31m#         )[0m[0;34m[0m
[0;34m[0m[0;31m#         valid_speedups = param_data["speedup"][~param_data["speedup"].isna()][0m[0;34m[0m
[0;34m[0m[0;31m#         if len(valid_speedups) > 0:[0m[0;34m[0m
[0;34m[0m[0;31m#             print([0m[0;34m[0m
[0;34m[0m[0;31m#                 f"  Speedup range: {valid_speedups.min():.1f}x - {valid_speedups.max():.1f}x"[0m[0;34m[0m
[0;34m[0m[0;31m#             )[0m[0;34m[0m
[0;34m[0m[0;31m#         print([0m[0;34m[0m
[0;34m[0m[0;31m#             f"  Max throughput: {param_data['gpac_throughput'].max():.2f} M samples/s"[0m[0;34m[0m
[0;34m[0m[0;31m#         )[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m#     return 0[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;32mdef[0m [0mrun_main[0m[0;34m([0m[0;34m)[0m [0;34m->[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m
[0;34m[0m    [0;34m"""Initialize mngs framework, run main function, and cleanup."""[0m[0;34m[0m
[0;34m[0m    [0;32mglobal[0m [0mCONFIG[0m[0;34m,[0m [0mCC[0m[0;34m,[0m [0msys[0m[0;34m,[0m [0mplt[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;32mimport[0m [0msys[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m
[0;34m[0m    [0;32mimport[0m [0mmngs[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0margs[0m [0;34m=[0m [0mparse_args[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;31m# Start mngs framework[0m[0;34m[0m
[0;34m[0m    [0mCONFIG[0m[0;34m,[0m [0msys[0m[0;34m.[0m[0mstdout[0m[0;34m,[0m [0msys[0m[0;34m.[0m[0mstderr[0m[0;34m,[0m [0mplt[0m[0;34m,[0m [0mCC[0m [0;34m=[0m [0mmngs[0m[0;34m.[0m[0mgen[0m[0;34m.[0m[0mstart[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0msys[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mplt[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0margs[0m[0;34m=[0m[0margs[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mfile[0m[0;34m=[0m[0m__file__[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mverbose[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0magg[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;31m# Main[0m[0;34m[0m
[0;34m[0m    [0mexit_status[0m [0;34m=[0m [0mmain[0m[0;34m([0m[0margs[0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m    [0;31m# Close the mngs framework[0m[0;34m[0m
[0;34m[0m    [0mmngs[0m[0;34m.[0m[0mgen[0m[0;34m.[0m[0mclose[0m[0;34m([0m[0;34m[0m
[0;34m[0m        [0mCONFIG[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mverbose[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mnotify[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mmessage[0m[0;34m=[0m[0;34m""[0m[0;34m,[0m[0;34m[0m
[0;34m[0m        [0mexit_status[0m[0;34m=[0m[0mexit_status[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;32mif[0m [0m__name__[0m [0;34m==[0m [0;34m"__main__"[0m[0;34m:[0m[0;34m[0m
[0;34m[0m    [0mrun_main[0m[0;34m([0m[0;34m)[0m[0;34m[0m
[0;34m[0m[0;34m[0m
[0;34m[0m[0;31m# EOF[0m[0;34m[0m[0;34m[0m[0m
## -- End pasted text --
[93m
----------------------------------------
Namespace(device='auto', n_repeats=3, no_quick=False)
----------------------------------------
[0m
[94m
########################################
## mngs v1.11.0
## 2025Y-06M-08D-21h05m51s_Bcbf (PID: 280711)
########################################
[0m
[93m
========================================
/home/ywatanabe/proj/gPAC/examples/_performance/parameter_sweep/parameter_sweep_benchmark.py
Namespace(device='auto', n_repeats=3, no_quick=False, quick=True)
========================================
[0m
> [0;32m<ipython-input-39-967859790948>[0m(219)[0;36mmain[0;34m()[0m
[0;32m    218 [0;31m    [0m__import__[0m[0;34m([0m[0;34m"ipdb"[0m[0;34m)[0m[0;34m.[0m[0mset_trace[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[0;32m--> 219 [0;31m    [0mcomp_time_gp[0m[0;34m,[0m [0moutput_gp[0m [0;34m=[0m [0mbenchmark[0m[0;34m([0m[0;34m**[0m[0mparams[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[0;32m    220 [0;31m    [0;31m# dict_keys(['pac', 'phase_frequencies', 'amplitude_frequencies', 'pac_z', 'surrogates', 'surrogate_mean', 'surrogate_std'])[0m[0;34m[0m[0;34m[0m[0m
[0m
{'package': 'gpac', 'n_runs': 3, 'n_samples': 16, 'batch_size': 4, 'n_channels': 4, 'n_segments': 4, 'duration_sec': 4, 'fs': 512, 'pha_start_hz': 2.0, 'pha_end_hz': 30.0, 'pha_n_bands': 30, 'amp_start_hz': 30, 'amp_end_hz': 230, 'amp_n_bands': 30, 'device': 'cuda', 'device_ids': None, 'n_perm': 4, 'fp16': False}
[93m
----------------------------------------
=== Benchmark gPAC ===
----------------------------------------
[0m
✅ PAC compiled with default mode
> [0;32m<ipython-input-39-967859790948>[0m(222)[0;36mmain[0;34m()[0m
[0;32m    221 [0;31m    [0m__import__[0m[0;34m([0m[0;34m"ipdb"[0m[0;34m)[0m[0;34m.[0m[0mset_trace[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[0;32m--> 222 [0;31m    [0;32mreturn[0m [0;36m0[0m[0;34m[0m[0;34m[0m[0m
[0m[0;32m    223 [0;31m[0;34m[0m[0m
[0m
0.004240512847900391
{'package': 'gpac', 'n_runs': 3, 'n_samples': 16, 'batch_size': 4, 'n_channels': 4, 'n_segments': 4, 'duration_sec': 4, 'fs': 512, 'pha_start_hz': 2.0, 'pha_end_hz': 30.0, 'pha_n_bands': 30, 'amp_start_hz': 30, 'amp_end_hz': 230, 'amp_n_bands': 30, 'device': 'cuda', 'device_ids': None, 'n_perm': 4, 'fp16': False}
{'pac': tensor([[[[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]]],


        [[[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]]],


        [[[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]]],


        [[[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]],

         [[1.7453e-02, 4.5250e-03, 4.0277e-03,  ..., 1.1416e-02,
           1.0772e-02, 1.1588e-02],
          [1.6668e-02, 7.5178e-03, 7.2285e-03,  ..., 1.3823e-02,
           1.3210e-02, 1.5099e-02],
          [1.1598e-02, 6.2884e-03, 5.8185e-03,  ..., 9.1444e-03,
           9.6729e-03, 1.2432e-02],
          ...,
          [1.4830e-04, 1.3477e-04, 1.4204e-04,  ..., 3.3236e-04,
           4.3941e-04, 5.8997e-04],
          [2.8241e-04, 1.7977e-04, 1.6809e-04,  ..., 1.7816e-04,
           3.0679e-04, 3.9083e-04],
          [8.8453e-05, 9.0063e-05, 8.0407e-05,  ..., 2.1249e-04,
           3.1084e-04, 4.2665e-04]]]], device='cuda:0'), 'phase_frequencies': tensor([ 2.0000,  2.1958,  2.4107,  2.6466,  2.9057,  3.1901,  3.5023,  3.8452,
         4.2215,  4.6347,  5.0884,  5.5864,  6.1332,  6.7335,  7.3926,  8.1162,
         8.9106,  9.7828, 10.7403, 11.7916, 12.9458, 14.2129, 15.6040, 17.1314,
        18.8082, 20.6491, 22.6703, 24.8892, 27.3254, 30.0000]), 'amplitude_frequencies': tensor([ 30.0000,  32.1829,  34.5246,  37.0367,  39.7316,  42.6226,  45.7239,
         49.0509,  52.6200,  56.4487,  60.5561,  64.9623,  69.6892,  74.7600,
         80.1997,  86.0352,  92.2954,  99.0111, 106.2154, 113.9439, 122.2348,
        131.1289, 140.6702, 150.9057, 161.8861, 173.6653, 186.3017, 199.8575,
        214.3997, 230.0000]), 'pac_z': tensor([[[[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]]],


        [[[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]]],


        [[[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]]],


        [[[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]],

         [[ 1.2672, -4.1771, -4.3136,  ..., -0.2797, -0.8019, -0.9654],
          [ 0.3140, -7.0067, -4.1490,  ..., -1.1020, -0.9908, -0.8694],
          [ 0.2108, -2.6534, -2.9766,  ..., -0.8902, -0.4465,  0.5788],
          ...,
          [-1.4336, -1.7157, -1.7618,  ..., -1.5877, -0.6918,  2.2439],
          [ 1.2416, -0.6475, -1.3603,  ..., -1.7864, -0.8727,  1.8391],
          [-1.5261, -1.3096, -1.5409,  ..., -1.4346, -1.4786,  2.4595]]]],
       device='cuda:0'), 'surrogates': None, 'surrogate_mean': tensor([[[[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]]],


        [[[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]]],


        [[[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]]],


        [[[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]],

         [[0.0115, 0.0172, 0.0190,  ..., 0.0120, 0.0123, 0.0132],
          [0.0152, 0.0199, 0.0203,  ..., 0.0158, 0.0161, 0.0169],
          [0.0107, 0.0139, 0.0150,  ..., 0.0103, 0.0104, 0.0107],
          ...,
          [0.0003, 0.0003, 0.0004,  ..., 0.0007, 0.0006, 0.0004],
          [0.0002, 0.0002, 0.0003,  ..., 0.0006, 0.0005, 0.0003],
          [0.0003, 0.0003, 0.0003,  ..., 0.0006, 0.0005, 0.0003]]]],
       device='cuda:0'), 'surrogate_std': tensor([[[[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]]],


        [[[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]]],


        [[[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]]],


        [[[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]],

         [[4.7093e-03, 3.0319e-03, 3.4644e-03,  ..., 2.2646e-03,
           1.8697e-03, 1.6692e-03],
          [4.8267e-03, 1.7606e-03, 3.1620e-03,  ..., 1.8016e-03,
           2.8988e-03, 2.1113e-03],
          [4.3134e-03, 2.8658e-03, 3.0913e-03,  ..., 1.2742e-03,
           1.7012e-03, 2.9549e-03],
          ...,
          [1.0019e-04, 1.1840e-04, 1.1953e-04,  ..., 2.0803e-04,
           2.2753e-04, 1.0116e-04],
          [4.6194e-05, 7.6341e-05, 7.7316e-05,  ..., 2.5636e-04,
           1.9695e-04, 7.0855e-05],
          [1.2155e-04, 1.3788e-04, 1.4832e-04,  ..., 3.0407e-04,
           1.4311e-04, 6.6183e-05]]]], device='cuda:0')}
array([ 2. ,  2.6,  3.2,  3.8,  4.4,  5. ,  5.6,  6.2,  6.8,  7.4,  8. ,
        8.6,  9.2,  9.8, 10.4, 11. , 11.6, 12.2, 12.8, 13.4, 14. , 14.6,
       15.2, 15.8, 16.4, 17. , 17.6, 18.2, 18.8, 19.4, 20. ])
(31,)
array([[ 2. ,  2.6],
       [ 2.6,  3.2],
       [ 3.2,  3.8],
       [ 3.8,  4.4],
       [ 4.4,  5. ],
       [ 5. ,  5.6],
       [ 5.6,  6.2],
       [ 6.2,  6.8],
       [ 6.8,  7.4],
       [ 7.4,  8. ],
       [ 8. ,  8.6],
       [ 8.6,  9.2],
       [ 9.2,  9.8],
       [ 9.8, 10.4],
       [10.4, 11. ],
       [11. , 11.6],
       [11.6, 12.2],
       [12.2, 12.8],
       [12.8, 13.4],
       [13.4, 14. ],
       [14. , 14.6],
       [14.6, 15.2],
       [15.2, 15.8],
       [15.8, 16.4],
       [16.4, 17. ],
       [17. , 17.6],
       [17.6, 18.2],
       [18.2, 18.8],
       [18.8, 19.4],
       [19.4, 20. ]])
*** NameError: name 'TensorPAC' is not defined
*** NameError: name 'tensorpac' is not defined
*** NameError: name 'tensorpac' is not defined
<class 'tensorpac.pac.Pac'>
*** NameError: name 'f_amp' is not defined
*** NameError: name 'f_amp' is not defined
*** SyntaxError: invalid syntax
*** SyntaxError: invalid syntax
*** SyntaxError: invalid syntax
*** SyntaxError: invalid syntax
[0;31mInit signature:[0m
[0mgpac[0m[0;34m.[0m[0mPAC[0m[0;34m([0m[0;34m[0m
[0;34m[0m    [0mseq_len[0m[0;34m:[0m [0mint[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mfs[0m[0;34m:[0m [0mfloat[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mpha_start_hz[0m[0;34m:[0m [0mfloat[0m [0;34m=[0m [0;36m2[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mpha_end_hz[0m[0;34m:[0m [0mfloat[0m [0;34m=[0m [0;36m20[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mpha_n_bands[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m30[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mamp_start_hz[0m[0;34m:[0m [0mfloat[0m [0;34m=[0m [0;36m60[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mamp_end_hz[0m[0;34m:[0m [0mfloat[0m [0;34m=[0m [0;36m160[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mamp_n_bands[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m30[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mn_perm[0m[0;34m:[0m [0mOptional[0m[0;34m[[0m[0mint[0m[0;34m][0m [0;34m=[0m [0;32mNone[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0msurrogate_chunk_size[0m[0;34m:[0m [0mint[0m [0;34m=[0m [0;36m20[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mfp16[0m[0;34m:[0m [0mbool[0m [0;34m=[0m [0;32mTrue[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mdevice_ids[0m[0;34m:[0m [0mUnion[0m[0;34m[[0m[0mlist[0m[0;34m,[0m [0mstr[0m[0;34m][0m [0;34m=[0m [0;34m'all'[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0menable_caching[0m[0;34m:[0m [0mbool[0m [0;34m=[0m [0;32mTrue[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mcompile_mode[0m[0;34m:[0m [0mbool[0m [0;34m=[0m [0;32mTrue[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mmax_memory_usage[0m[0;34m:[0m [0mfloat[0m [0;34m=[0m [0;36m0.95[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0menable_memory_profiling[0m[0;34m:[0m [0mbool[0m [0;34m=[0m [0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mvram_gb[0m[0;34m:[0m [0mUnion[0m[0;34m[[0m[0mstr[0m[0;34m,[0m [0mfloat[0m[0;34m][0m [0;34m=[0m [0;36m80.0[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mtrainable[0m[0;34m:[0m [0mbool[0m [0;34m=[0m [0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mpha_n_pool_ratio[0m[0;34m:[0m [0mOptional[0m[0;34m[[0m[0mfloat[0m[0;34m][0m [0;34m=[0m [0;32mNone[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mamp_n_pool_ratio[0m[0;34m:[0m [0mOptional[0m[0;34m[[0m[0mfloat[0m[0;34m][0m [0;34m=[0m [0;32mNone[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mtemperature[0m[0;34m:[0m [0mfloat[0m [0;34m=[0m [0;36m1.0[0m[0;34m,[0m[0;34m[0m
[0;34m[0m    [0mhard_selection[0m[0;34m:[0m [0mbool[0m [0;34m=[0m [0;32mFalse[0m[0;34m,[0m[0;34m[0m
[0;34m[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;31mDocstring:[0m      Ultra-fast PAC optimized for massive VRAM systems.
[0;31mFile:[0m           /data/gpfs/projects/punim2354/ywatanabe/gPAC/src/gpac/_PAC.py
[0;31mType:[0m           type
[0;31mSubclasses:[0m     


Do you really want to exit ([y]/n)? 
[23;0t